// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;

import {ERC20} from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import {ReentrancyGuard} from "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract Token is ERC20, ReentrancyGuard {
    uint256 public constant MAX_SUPPLY = 1000000 * 10 ** 18; // 1 millón de tokens
    
    event TokensMinted(address indexed to, uint256 amount);
    event TokensBurned(address indexed from, uint256 amount);

    constructor() ERC20("ER_Token", "TKN") {
        _mint(msg.sender, 100000 * 10 ** decimals()); // Emisión inicial de 100k
    }

    function mint() public payable nonReentrant {
        require(totalSupply() + msg.value * 10 <= MAX_SUPPLY, "Max supply exceeded");
        _mint(msg.sender, msg.value * 10);
        emit TokensMinted(msg.sender, msg.value * 10);
    }

    function burn(uint256 amount) public nonReentrant {
        _burn(msg.sender, amount);
        payable(msg.sender).transfer(amount / 10);
        emit TokensBurned(msg.sender, amount);
    }

    receive() external payable {
        mint();
    }

    fallback() external payable {
        mint();
    }
}
