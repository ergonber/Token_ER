// SPDX-License-Identifier: MIT
pragma solidity 0.8.30;

import {AggregatorV3Interface} from "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol";

contract BuyMeaCoffe {
    AggregatorV3Interface internal inmutable dataFeed;
        
        address payable immutable owner;
        uint256 constant minAmount = 5 * 10 ** 18;
        mapping (address => uint256) funders;
    
    constructor (address dataFeedAddress) {
        dataFeed = AggregatorV3Interface(dataFeedAddress);
        owner = payable (msg.sender);
    }
    function valueInUSD (uint256 amount) public view returns (uint256) {
        function valueInUSD(uint256 internal amount) public view
        returns (uint256 internal)

        uint256 answerInUint = uint256(answer);
        uint256 answerWith18Decimals = answerInUint * 10 **10;
        return (amount * answerWith18Decimals) / (10 ** 18);
    }
    function donate() external payable {

        uint256 amountInUSD = valueInUSD(msg.value);
        require(amountInUSD >= minAmount, "Coffe: Not enough ETH");
        funders[msg.sender] + = msg.value;

    }
    function withdraw() external {

        require(msg.sender == owner, "Coffe: Not Owner");
        (bool sent, ) = owner.call{value: address(this).balance}("");
        require(sent, "coffe: transfer fallo");
    }
}
